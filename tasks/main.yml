---
# tasks file for computate.computate_solr_openshift

- name: Upload solr configset configmap
  shell: "oc login {{SOLR_HOST}} --token={{SOLR_TOKEN}} && oc create configmap solr-configset --from-file=/usr/local/src/computate/config/solr/server/solr/configsets/computate/conf/ --dry-run -o yaml -n {{ SOLR_NAMESPACE }} | oc apply -n {{ SOLR_NAMESPACE }} -f -"
  ignore_errors: true

- name: Install solr keystore
  k8s:
    state: present
    name: solr-keystore
    host: "{{SOLR_HOST}}"
    api_key: "{{SOLR_TOKEN}}"
    namespace: "{{SOLR_NAMESPACE}}"
    definition: "{{ lookup('template', 'project_solr_keystore.yml') }}"
    validate_certs: false
  when: ENABLE_SOLR_SSL

- name: Install solr ssl secret
  k8s:
    state: present
    name: solr-bin-secret
    host: "{{SOLR_HOST}}"
    api_key: "{{SOLR_TOKEN}}"
    namespace: "{{SOLR_NAMESPACE}}"
    definition: "{{ lookup('template', 'project_solr_bin_secret.yml') }}"
    validate_certs: false
  when: ENABLE_SOLR_SSL

- name: Install solr image stream on OpenShift
  k8s: 
    state: present
    name: solr-image-stream
    host: "{{SOLR_HOST}}"
    api_key: "{{SOLR_TOKEN}}"
    namespace: "{{SOLR_NAMESPACE}}"
    definition: "{{ lookup('template', 'project_solr_image_stream.yml') }}"
    validate_certs: false

- name: Install solr persistent volume claim on OpenShift
  k8s: 
    state: present
    name: solr-persistent-volume-claim
    host: "{{SOLR_HOST}}"
    api_key: "{{SOLR_TOKEN}}"
    namespace: "{{SOLR_NAMESPACE}}"
    definition: "{{ lookup('template', 'project_solr_persistent_volume_claim.yml') }}"
    validate_certs: false

- name: Install solr deployment config on OpenShift
  k8s: 
    state: present
    name: solr
    host: "{{SOLR_HOST}}"
    api_key: "{{SOLR_TOKEN}}"
    namespace: "{{SOLR_NAMESPACE}}"
    definition: "{{ lookup('template', 'project_solr_deployment_config.yml') }}"
    validate_certs: false

- name: Install solr service on OpenShift
  k8s: 
    state: present
    name: solr
    host: "{{SOLR_HOST}}"
    api_key: "{{SOLR_TOKEN}}"
    namespace: "{{SOLR_NAMESPACE}}"
    definition: "{{ lookup('template', 'project_solr_service.yml') }}"
    validate_certs: false

- name: Upload computate configset to solr
  shell: "oc login {{ SOLR_HOST }} --token={{ REDHAT_OPENSHIFT_TOKEN }} && oc exec $(oc get pod -l app=solr -o jsonpath='{.items[0].metadata.name}' -n {{ SOLR_NAMESPACE }}) -n {{ SOLR_NAMESPACE }} -- /opt/solr/bin/solr zk upconfig -n computate -d {{ SOLR_OPT }}/server/solr/configsets/computate -z '{{ ZOOKEEPER_HOST_NAME }}:{{ ZOOKEEPER_PORT }}' || true"
  register: create_configset

- name: Upload security configuration to zookeeper
  shell: "oc login {{SOLR_HOST}} --token={{SOLR_TOKEN}} && oc exec $(oc get pod -l app=solr -o jsonpath='{.items[0].metadata.name}') -n {{SOLR_NAMESPACE}} -- {{SOLR_OPT}}/bin/solr auth enable -credentials '{{ SOLR_USER }}:{{ SOLR_PASSWORD }}' -blockUnknown true"
  ignore_errors: true
  when: ENABLE_SOLR_BASIC_AUTH

- name: Register https property to zookeeper
  shell: "oc login {{SOLR_HOST}} --token={{SOLR_TOKEN}} && oc exec $(oc get pod -l app=solr -o jsonpath='{.items[0].metadata.name}') -n {{SOLR_NAMESPACE}} -- {{SOLR_OPT}}/server/scripts/cloud-scripts/zkcli.sh -zkhost {{ ZOOKEEPER_HOST_NAME }}:{{ ZOOKEEPER_PORT }} -cmd clusterprop -name urlScheme -val https"
  ignore_errors: true
  when: ENABLE_SOLR_SSL
